// This code was generated by robots, do not modify
// this file implements the generated file reflection_gen.h

#include "reflection_gen.h"

@struct_metadata{TypeMetadata* meta_@struct_name = new TypeMetadata;
}

void reflectionStartup_generated() {
   @enum_metadata_init{
   {
      auto& enumName = meta_@enum_name;
      enumName->name = intern("@enum_name");
      enumName->size = sizeof(@enum_name);
      enumName->variety = TypeVariety_Enum;
      @enum_flag{enumName->enumFlags |= @flag{};
      }

      @enum_metadata_entry_init{
      {
         EnumEntryMetadata entry;
         entry.name = intern("@entry_name");
         entry.value = @entry_name;
         enumName->enumEntries.push_back(entry);
      }

      }
   }

   }
   @struct_metadata_init{
   {
      auto& structName = meta_@struct_name;
      structName->name = intern("@struct_name");
      structName->size = sizeof(@struct_name);
      structName->variety = TypeVariety_Struct;

      structName->funcs.create = [](void* data) {new (data) @struct_name;};
      structName->funcs.destroy = [](void* data) {((@struct_name*)data)->~@struct_name{}(); };

      @struct_metadata_member_init{
      {
         StructMemberMetadata member;
         member.name = intern("@member_name");
         member.offset = offsetof(@struct_name, @member_name);
         member.type = reflect<@member_type>();
         member.customUI = customUIRenderer<@member_type>();
         @struct_flag{member.flags |= @flag;
         }@struct_static{member.staticArraySize = @size;
         }@struct_ui{member.ui.@key = (float)@value;
         }
         structName->structMembers.push_back(member);
      }

      }
   }

   }

   @initialize_file_reflection{
   //@file --------------------------------------
   void @file{}_reflectionStartup_generated();
   @file{}_reflectionStartup_generated();

   }
}