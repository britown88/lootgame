// This code was generated by robots, do not modify
// This is an inline file for use with ui

#include "reflection_gen.h"


// SCFTestState ----------------------------
TypeMetadata* meta_SCFTestState = new TypeMetadata();
template<>
struct Reflector<SCFTestState>{
   static TypeMetadata const* type() { return meta_SCFTestState; }
};



void ui_reflectionStartup_generated(){
   // this should be called automatically by reflectionStartup_generated()
   
   
   {
      auto& structName = meta_SCFTestState;
      structName->name = intern("SCFTestState");
      structName->size = sizeof(SCFTestState);
      structName->variety = TypeVariety_Struct;

      structName->funcs.create = [](void* data) {new (data) SCFTestState;};
      structName->funcs.destroy = [](void* data) {((SCFTestState*)data)->~SCFTestState(); };

      
      {
         StructMemberMetadata member;
         member.name = intern("writer");
         member.offset = offsetof(SCFTestState, writer);
         member.type = reflect<SCFWriter*>();
         structName->structMembers.push_back(member);
      }

      
      {
         StructMemberMetadata member;
         member.name = intern("stringBuff");
         member.offset = offsetof(SCFTestState, stringBuff);
         member.type = reflect<char>();
         structName->structMembers.push_back(member);
      }

      
      {
         StructMemberMetadata member;
         member.name = intern("i");
         member.offset = offsetof(SCFTestState, i);
         member.type = reflect<int>();
         structName->structMembers.push_back(member);
      }

      
      {
         StructMemberMetadata member;
         member.name = intern("f");
         member.offset = offsetof(SCFTestState, f);
         member.type = reflect<float>();
         structName->structMembers.push_back(member);
      }

      
   }

      
}