// This code was generated by robots, do not modify
// This is an inline file for use with main

#include "reflection_gen.h"


// ReflectTest3 ----------------------------
TypeMetadata* meta_ReflectTest3 = new TypeMetadata();
template<>
struct Reflector<ReflectTest3>{
   static TypeMetadata const* type() { return meta_ReflectTest3; }
};



void main_reflectionStartup_generated(){
   // this should be called automatically by reflectionStartup_generated()
   
   
   {
      auto& structName = meta_ReflectTest3;
      structName->name = intern("ReflectTest3");
      structName->size = sizeof(ReflectTest3);
      structName->variety = TypeVariety_Struct;

      structName->funcs.create = [](void* data) {new (data) ReflectTest3;};
      structName->funcs.destroy = [](void* data) {((ReflectTest3*)data)->~ReflectTest3(); };

      
      {
         StructMemberMetadata member;
         member.name = intern("staticArr");
         member.offset = offsetof(ReflectTest3, staticArr);
         member.type = reflect<int>();
         member.flags |= StructMemberFlags_StaticArray;
         member.staticArraySize = 100;
         

         structName->structMembers.push_back(member);
      }

      
   }

      
}